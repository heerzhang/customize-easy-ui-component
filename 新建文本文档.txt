副作用钩子useEffect( ()=>{return () => unsubcribe();} , ? ) 第二参数null是每次都要执行第一个参数的功能，第二参数若是[]空数组的就是只做一次的，[a,b]依赖a/b变化触发。
    "@types/storybook__react": "^4.0.1",
   https://sancho-ui.com/components/icon/
/// <reference types="@emotion/react/types/css-prop" />
    "rollup-plugin-filesize": "^9.0.2",
        "generate-icons": "create-react-icons  --source ./node_modules/feather-icons/dist/icons/*.svg  --destination

https://github.com/heerzhang/customize-easy-ui-component.git
    "@types/prop-types": "15.7.0",
        "prop-types": "^15.7.2",
 //头部标记    /** @jsx jsx */
@emotion/react   @emotion/core
https://github.com/ArmandDu/monorepo-yarn2-react-typescript-storybook6-issue/tree/main/packages/frontend/stories

book jiu版本5.06   https://github.com/storybookjs/storybook/blob/next/MIGRATION.md
@storybook/preset-create-react-app
If you're using CRA and migrating from an earlier Storybook version, please install @storybook/preset-create-react-app
ts<3.8?ＴＳＸ版本https://github.com/tremby/storybook-ts-tsx-bug/blob/main/components/tsx-component.stories.tsx
https://github.com/storybookjs/storybook/blob/master/examples/cra-ts-kitchen-sink/src/stories/1-Button.stories.tsx

 function storiesOf(name: string, module: NodeModule): Story;
  add(storyName: string, callback: RenderFunction, parameters?: DecoratorParameters): this;
storiesOf(kind: StoryKind, module: NodeModule): StoryApi<StoryFnReturnType>;
 add: (storyName: StoryName, storyFn: StoryFn<StoryFnReturnType>, parameters?: Parameters) => StoryApi<StoryFnReturnType>;
组件定义前面 /** 注释特别的。
/** @jsxImportSource @emotion/react */

删除src/stories目录后就不会报错TS2589: Type instantiation is excessively deep and possibly infinite，可能循环了，拆成两个工程得了。
ES2015     "react-spring": "~9.0.0-rc.3"
没用webpack， rollup也可以省略，tsc后直接发布esm
    "@popperjs/core": "^2.5.4",
    "react-popper": "^2.2.4",
use-positioner.ts  ComboBox  ComboBoxInput ComboBoxList
丢弃对commonjs规范的支持，保留ES Module方式 https://popper.js.org/react-popper/v2/
FocusTrap.propTypes = {
  focusTrapOptions: PropTypes.shape({
  children: PropTypes.oneOfType([
    PropTypes.element, // React element
    PropTypes.instanceOf(ElementType), // DOM element
  ]),
  }),
};
ListItem interactive=f 去掉bind(),可不报错，但是无hover效果;
<ListItem onPress改成onClick={ async(e) => 也没作用；最后terminateOnScroll=false参数解决。
import Switch from "react-switch";
                <InputGroupLine label={`是否汽车电梯:`}>
                  <div>
                    <Switch checked={汽车电梯}
                          onChange={() => set汽车电梯(prev => !prev)} />
                  </div>
               </InputGroupLine>



//去掉<input误给的topDivStyle就能从178ms降低到142ms 【3Fm】了；
//首层<div topDivStyle 等都去掉，130ms  ，!! css样式影响挺大的。
//在<input的头顶多搞出一层<div来嵌套下实际不会影响性能的。
//--InputSimple普通FunctionComponent代替React.forwardRef(safeBind({ ref }就能从365ms变240ms啦。
//性能测试 使用的
export const InputSimple : React.FunctionComponent<InputBaseProps>=
  (
    {
      autoComplete,
      autoFocus,
      inputSize = "md",
      topDivStyle,
      ...other
    }
  ) => {

    //去掉 bind active Background从240ms变为230ms； onTouchStart()+css:colors.background 影响性能还算可以。
    //-再去掉baseStyles 变为225ms；
    //--再去掉inputSizes[] 变为221ms；  css:fontSize+padding;
    //--- useSharedStyle() errorStyles 变为210ms；
    //----height样式去掉,最小字体高, 变为172ms； 元素高度css影响性能较大，也得用啊！
    //-----把useContext去掉,变为171ms；
    //------把getHeight()去掉,只是空荡荡函数外套了，变为167ms；
    //最后连InputSimple这个FunctionComponent函数也直接替换成<input，变为165ms，加一层组件函数嵌套实际性能影响较小。
    return (
      <input  {...other} />
    );
  };

line 360px优化
,
    "use-scroll-lock": "^1.0.0"